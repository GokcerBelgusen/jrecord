package example;
 /*
  *   This code was generated by JRecord projects CodeGen program
  *   on the 7 Sep 2015 10:46:37
  *   It is should be used as an example of reading/writing files
  *   using JRecord. You will need to modify the code to meet your
  *   needs. The Author of CodeGen (Bruce Martin) program takes no 
  *   reponsibility for the accuracy of the generated code. 
  *
  *   Good Luck
  *              Bruce Martin
  */

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Common.Constants;
import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.External.CopybookLoader;
import net.sf.JRecord.IO.AbstractLineReader;
import net.sf.JRecord.def.IO.builders.ICobolIOBuilder;

import example.ioBuilderWithSchema.schema.RecordDtar020;
import example.ioBuilderWithSchema.schema.SchemaDtar020;
	

/**
 * Read Cobol file using a Cobol Copybook (Dtar020).
 *
 * This Generated program is intended as an example of using JRecord
 * rather than a useful program (that compiles - it wont).
 * You should regard it as a starting point and modify 
 * it according to needs
 */
public final class ReadDtar020 {

    private String testDir        = "G:/temp/";
    private String salesFile      = testDir + "DTAR020.bin";

    private String copybookName   = "/F:/Work/EclipseWorkspaces/std_workspace/JRecord_CodeGen/bin/test/gen/DTAR020.cbl"; 
 
    /**
     * Example of LineReader  classes
     */
    public ReadDtar020() {
        super();

        AbstractLine saleRecord;
        int lineNum = 0;

        try {
            ICobolIOBuilder iob = JRecordInterface1.COBOL
                                       .newIOBuilder(copybookName)
                                           .setFont("CP037")
                                           .setFileOrganization(Constants.IO_FIXED_LENGTH)
                                           .setSplitCopybook(CopybookLoader.SPLIT_NONE)
                                           .setDropCopybookNameFromFields(true);  
            SchemaDtar020 schemaDtar020
                    = new SchemaDtar020(iob.getLayout()); 
            RecordDtar020 rDtar020 = schemaDtar020.recordDtar020;
            AbstractLineReader reader = iob.newReader(salesFile);
            while ((saleRecord = reader.read()) != null) {
                lineNum += 1;
                System.out.println(
                              saleRecord.getFieldValue(rDtar020.fldKeycodeNo).asString()
                      + " " + saleRecord.getFieldValue(rDtar020.fldStoreNo).asString()
                      + " " + saleRecord.getFieldValue(rDtar020.fldDate).asString()
                      + " " + saleRecord.getFieldValue(rDtar020.fldDeptNo).asString()
                      + " " + saleRecord.getFieldValue(rDtar020.fldQtySold).asString()
                      + " " + saleRecord.getFieldValue(rDtar020.fldSalePrice).asString()
                   );
            }

            reader.close();
        } catch (Exception e) {
            System.out.println("~~> " + lineNum + " " + e);
            System.out.println();

            e.printStackTrace();
        }
    }
    
    public static void main(String[] args) {
        new ReadDtar020();
    }
}

