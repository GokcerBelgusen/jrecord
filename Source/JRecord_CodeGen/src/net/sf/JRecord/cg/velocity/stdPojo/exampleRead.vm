package ${packageId};
##  
##   Read Example JRecord using Generated class
##
##   Author: Bruce Martin
##
#incl("schema/CommentExample.pvm")

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.IO.AbstractLineReader;
#IoBldrImport()


#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})                     
import ${generateOptions.packageId}.data.Line${r.extensionName}JR;
#*  *##end                                           
	

/**
 * Read Cobol file using a Cobol Copybook (${generateOptions.schemaDefinition.extensionName}).
 *
 * This Generated program is intended as an example of using JRecord
 * rather than a useful program (that compiles - it wont).
 * You should regard it as a starting point and modify 
 * it according to needs
 */
public final class Read${generateOptions.schemaDefinition.extensionName} {

    private String testDir        = "G:/temp/";
    private String salesFile      = testDir + "DTAR020.bin";
#*    private String salesFileOut   = testDir + "DTAR020out.bin";*#
    private String copybookName   = "${generateOptions.getSchemaDefinition().schemaName}"; 
 
    /**
     * Example of LineReader  classes
     */
    public Read${generateOptions.schemaDefinition.extensionName}() {
        super();

        AbstractLine line;
        int lineNum = 0;

        try {
#incl("schema/DclIOBuilder.pvm")                                         

#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})                             
           Line${r.extensionName}JR line${r.extensionName}JR = new Line${r.extensionName}JR();
#*  *##end                                           

###*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})                     
##            FieldNames${generateOptions.schemaDefinition.extensionName}.Record${r.extensionName} r${r.extensionName} = FieldNames${generateOptions.schemaDefinition.extensionName}.RECORD_${r.constantName};
###*  *##end                                           
            AbstractLineReader reader = iob.newReader(salesFile);
#macro (printFields)
#*  *##set( $sep = "        ")    
#*  *##foreach($f in ${r.getFields(11)})
#*      *##if (! ${f.isArrayItem()})     
                      ${sep}line${r.extensionName}JR.get${f.extensionName}() 
#*            *##set( $sep = '+ " " + ')    
#*      *##end
#*  *##end
#*  *##foreach($a in ${r.getArrayDetailsList()}) 
#*      *##if (! ${f.isArrayItem()})
                      ${sep}line${r.extensionName}JR.get${a.getFirstElement().extensionName}(${a.getZeroArrayIndex()})
#*      *##end
#*  *##end
#end	
            while ((line = reader.read()) != null) {
                lineNum += 1;
#*  *##if (${generateOptions.schemaDefinition.getRecords().size()} == 1)
#*      *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
	        line${r.extensionName}JR.setLine(line);
                System.out.println(
#*          *##printFields()  
###*          *##foreach($f in ${r.getFields(11)}) 
##                      ${sep}line.getFieldValue(r${r.extensionName}.fld${f.extensionName}).asString()
###*              *##set( $sep = '+ " " + ')    
###*          *##end
                   );
#*      *##end                        
#*  *##else	
#*      *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()}) 
                if (/* ${r.record.recordName} */) { 
                   line${r.extensionName}JR.setLine(line);
                   System.out.println(
#*          *##printFields()  
###*          *##foreach($f in ${r.getFields(11)}) 
##                      ${sep}line.getFieldValue(r${r.extensionName}.fld${f.extensionName}).asString()
###*              *##set( $sep = '+ " " + ')    
###*          *##end
                   );
                }
#*      *##end                        
#*  *##end                        
            }

            reader.close();
        } catch (Exception e) {
            System.out.println("~~> " + lineNum + " " + e);
            System.out.println();

            e.printStackTrace();
        }
    }
    
    public static void main(String[] args) {
        new Read${generateOptions.schemaDefinition.extensionName}();
    }
}

